
// DOM Elements
const form = document.getElementById('contentForm');
const output = document.getElementById('output');
const performanceEl = document.getElementById('performance');
const errorEl = document.getElementById('error');
const resultsSection = document.getElementById('results');
const submitBtn = document.getElementById('submitBtn');
const buttonText = submitBtn.querySelector('.button-text');
const spinner = submitBtn.querySelector('.spinner');

// State
let isGenerating = false;

// Initialize the application
function init() {
  if (!form) {
    showError("Critical error: Form element not found. Please check the HTML structure.");
    return;
  }

  setupEventListeners();
}

// Set up event listeners
function setupEventListeners() {
  form.addEventListener('submit', handleFormSubmit);
  document.getElementById('copyBtn').addEventListener('click', handleCopy);
  document.getElementById('downloadBtn').addEventListener('click', handleDownload);
}

// Form submission handler - UPDATED TO PRESERVE INPUT VALUES
async function handleFormSubmit(e) {
  e.preventDefault();
  
  if (isGenerating) return;
  
  // Clear only results/errors, not form inputs
  clearResults();
  hideError();
  
  // Validate form
  if (!validateForm()) return;
  
  try {
    setLoadingState(true);
    
    // Capture form values before async operations
    const formData = {
      level: form.elements.level.value.trim(),
      subject: form.elements.subject.value.trim(),
      topic: form.elements.topic.value.trim(),
      template: form.elements.template.value
    };
    
    const prompt = buildPrompt(
      formData.level,
      formData.subject,
      formData.topic,
      formData.template
    );
    
    const generatedContent = await generateContent(prompt);
    displayResults(generatedContent);
  } catch (error) {
    showError(`Failed to generate content: ${error.message}`);
    console.error('Generation error:', error);
  } finally {
    setLoadingState(false);
  }
}

// Validate form inputs
function validateForm() {
  const { level, subject, topic, template } = form.elements;
  
  if (!level.value.trim() || !subject.value.trim() || !topic.value.trim() || !template.value) {
    showError('Please fill in all fields');
    return false;
  }
  
  return true;
}

// Build the prompt for the API
function buildPrompt(level, subject, topic, templateType) {
  if (!TEMPLATES[templateType]) {
    throw new Error('Invalid template type selected');
  }
  
  return TEMPLATES[templateType]
    .replace(/GRADE/g, level)
    .replace(/SUBJECT/g, subject)
    .replace(/TOPIC/g, topic);
}

// Generate content using API
async function generateContent(prompt) {
  const apiKey = "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";
  if (!apiKey) {
    throw new Error('API key is not configured');
  }
  
  const requestBody = {
    model: "mistral-7b",
    messages: [{ role: "user", content: prompt }],
    temperature: 0.7,
    max_tokens: 1500
  };
  
  const startTime = performance.now();
  
  try {
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": window.location.href || "http://localhost:5500",
        "X-Title": "Educational Content Generator",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(requestBody),
      signal: AbortSignal.timeout(30000)
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error?.message || `API request failed with status ${response.status}`);
    }
    
    const data = await response.json();
    const endTime = performance.now();
    
    if (!data.choices?.length) {
      throw new Error('No content generated by the API');
    }
    
    displayPerformanceMetrics(endTime - startTime, data.usage?.total_tokens);
    return data.choices[0].message.content.trim();
  } catch (error) {
    if (error.name === 'AbortError') {
      throw new Error('Request timed out. Please try again.');
    }
    throw error;
  }
}

// Display performance metrics
function displayPerformanceMetrics(durationMs, tokensUsed) {
  performanceEl.textContent = `Generated in ${Math.round(durationMs)}ms â€¢ Tokens used: ${tokensUsed || 'n/a'}`;
}

// Display the generated results
function displayResults(content) {
  output.textContent = content;
  resultsSection.classList.remove('hidden');
}

// Clear previous results (without affecting form inputs)
function clearResults() {
  output.textContent = '';
  performanceEl.textContent = '';
  resultsSection.classList.add('hidden');
}

// Show error message
function showError(message) {
  errorEl.textContent = message;
  errorEl.classList.remove('hidden');
}

// Hide error message
function hideError() {
  errorEl.textContent = '';
  errorEl.classList.add('hidden');
}

// Set loading state
function setLoadingState(isLoading) {
  isGenerating = isLoading;
  submitBtn.disabled = isLoading;
  buttonText.textContent = isLoading ? 'Generating...' : 'Generate';
  spinner.classList.toggle('hidden', !isLoading);
}

// Copy to clipboard
async function handleCopy() {
  try {
    await navigator.clipboard.writeText(output.textContent);
    showTemporaryMessage('Copied to clipboard!', 'success');
  } catch (err) {
    showError('Failed to copy text. Please try again.');
    console.error('Copy failed:', err);
  }
}

// Download content
function handleDownload() {
  const content = output.textContent;
  if (!content) {
    showError('No content to download');
    return;
  }
  
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `educational-content-${new Date().toISOString().slice(0, 10)}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  showTemporaryMessage('Download started!', 'success');
}

// Show temporary message
function showTemporaryMessage(message, type = 'success') {
  const tempEl = document.createElement('div');
  tempEl.className = `temp-message ${type}`;
  tempEl.textContent = message;
  document.body.appendChild(tempEl);
  
  setTimeout(() => {
    tempEl.classList.add('fade-out');
    setTimeout(() => tempEl.remove(), 500);
  }, 3000);
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', init);